{"name":"Nip-igniter","tagline":"Crud Generator For Codeigniter Framework","body":"# Welcome to NipIgniter.\r\n\r\nHello, teman-teman programmer Codeigniter Framework.\r\n\r\nProject ini adalah project sederhana yang ditujukan bagi pengguna codeigniter framework yang ingin mencoba **style berbeda** dari style yang biasanya. Mungkin bisa dibilang style yang lebih 'modern'. :p\r\n\r\nDi NipIgniter terdapat fitur tambahan yang sedikit meniru framework-framework yang ada. Seperti Yii Framework, CakePHP, Laravel. Tapi hanya sedikit tambahan saja. Soalnya saya masih newbie :D. \r\n\r\nSalah satu fitur tambahannya adalah **model ORM** yang sekarang digunakan oleh banyak framework PHP. Contohnya saja, method ```first()``` untuk menyeleksi satu row dari database, ```all()``` untuk menyeleksi semua row di database dan lainnya. \r\n\r\nFitur penting yang ingin disajikan adalah **generator CRUD**. Kalau teman-teman pernah menggunakan Yii, pastinya fitur ini sudah familiar. Fitur ini men-generate table yang ada di database. Table tersebut dijadikan sebagai model, dan kemudian dari model yang terbentuk dibuatlah fungsi CRUD.\r\n\r\nOke langsung saja. Langkah-langkah menggunakan Fitur CRUD adalah sebagai berikut.\r\n\r\n## CRUD Generator\r\n\r\n#### 1). Konfigurasi\r\n\r\nDownload source terlebih dahulu. Konfigurasikan file config berikut ini sesuai dengan pengaturan kalian masing-masing.. Sesuaikanlah.. :D\r\n\r\n```\r\napplication/config/database.php\r\n\r\n$db['default']['hostname'] = 'localhost';\r\n$db['default']['username'] = 'root';\r\n$db['default']['password'] = '';\r\n$db['default']['database'] = 'test';\r\n$db['default']['dbdriver'] = 'mysql';\r\n```\r\n\r\n```\r\napplication/config/config.php\r\n\r\n$config['base_url']\t= 'http://localhost/nip-igniter/';\r\n```\r\n\r\n#### 2). Sample Database\r\n\r\nBerikut adalah contoh sample database yang simple untuk tutorial pertama dari NipIgniter.\r\nAda beberapa aturan tambahan pada struktur database. Ditiap tabel **harus** ditambahkan 3 field berikut.\r\nPenamaan database huruf kecil semua jika lebih dari satu kata dipisahkan dengan _ (underscore).\r\n\r\n```\r\n `created` datetime NOT NULL,\r\n `updated` datetime DEFAULT NULL,\r\n `deleted` datetime DEFAULT NULL,\r\n```\r\n**Di struktur tablenya updated dan deleted boleh null.**\r\n\r\n![Table For Example Image](http://i39.tinypic.com/25i7pmf.jpg)\r\n\r\n#### 3). Form Generator\r\n\r\nForm berikut adalah tampilan utama dari CRUD Generator.\r\n\r\n![Home Page NipIgniter Image](http://i44.tinypic.com/ei2vdy.jpg)\r\n\r\n#### 4). Generate Table\r\n\r\nUrutan generate tabel adalah dimulai dari tabel master terlebih dahulu, dalam contoh ini berarti generate terlebih dahulu tabel program_studi. Setelah itu generate tabel mahasiswa.\r\n\r\n#### 4). Konfigurasi CRUD\r\n\r\nSetelah tombol generate ditekan, akan muncul konfigurasi sederhana dari tabel yang digenerate.\r\nDi konfigurasi itu, akan muncul pilihan **Field Type** yang terdiri dari 'Text', 'Textarea', 'Email', 'Password' dan 'Select'. Field type ini menunjukkan bagaimana inputan **HTML** akan dibuat.\r\n\r\nShow on Grid menunjukkan apakah field tersebut akan muncul pada saat Grid List Row (nanti akan ada screenshootnya).\r\n\r\n##### Tabel Program Studi\r\n\r\n![Program Studi Configuration Image](http://i43.tinypic.com/1zbxs9v.jpg)\r\n\r\nPilih 'Text' untuk 'Field Type' dari 'field' prodi.\r\n\r\n##### Tabel Mahasiswa\r\n\r\n![Mahasiswa Configuration Image](http://i43.tinypic.com/2wqcpdx.jpg)\r\n\r\nIsikan 'Field Type' seperti contoh diatas. Ada konfigurasi field yang berbeda di tabel mahasiswa.\r\nField prodi_id pada saat Create dan Update mengacu pada Tabel lain. 'Model name' dapat diisikan dengan Model 'ProgramStudi', hal ini dikarenakan tabel program_studi pada database akan membentuk Model dengan nama 'ProgramStudi' (penamaan model akan dijelaskan di dokumentasi setelah ini). 'Model's Primary Key' adalah primary key dari Model ProgramStudi. Inputan ini diisi dengan 'id'. Dan yang terakhir adalah nama label/ field dari tabel program_studi yang akan ditampilkan pada tag 'select' HTML. Dapat diisi dengan 'prodi'.\r\n\r\n```\r\n<select name=\"prodi_id\">\r\n  <option value=\"primary model\"> Label </option>\r\n</select>\r\n```\r\n![Configuration Image](http://i43.tinypic.com/bfi5pe.jpg)\r\n\r\n#### 5). Finish\r\n\r\n**Selesai**. \r\nKunjungi link base_url/mahasiswa dan base_url/program-studi. Pola url sedikit berbeda dengan style CodeIgniter yang biasanya. Lihat dokumentasi di bawah.\r\n\r\nBerikut adalah tampilan CRUD untuk mahasiswa.\r\n\r\n**Grid List Row**\r\n\r\n![Grid List Row](http://i41.tinypic.com/2i6i1kz.jpg)\r\n\r\n**Add Row**\r\n\r\n![Add Row](http://i40.tinypic.com/11skoib.jpg)\r\n\r\n**Update Row**\r\n\r\n![Update Row](http://i43.tinypic.com/154vsb9.jpg)\r\n\r\n**Delete Row**\r\n\r\n![Delete Row](http://i39.tinypic.com/168wpio.jpg)\r\n\r\n**Trash List**\r\n\r\n![Trash List](http://i44.tinypic.com/20az6g8.jpg)\r\n\r\n\r\n\r\n# Advance\r\nSetelah mengetahui fitur CRUD, ada baiknya kita mengetahui juga beberapa perubahan style yang ada di NipIgniter.\r\n\r\n### 1). Controller dan View\r\n\r\n#### Penamaan\r\n\r\nPenamaan controller sedikit diketatkan di NipIgniter. Aturannya adalah penamaan controller menggunakan camel case. Huruf depan besar, jika lebih dari dua kata maka digabung tanpa menggunakan spasi, kata kedua dan seterusnya dimulai dengan huruf besar. Akhiran diberi kata Controller. Berikut adalah contoh penamaan controller, file, dan penulisan URLnya.\r\n\r\nNama controller\t: \r\n```\r\nUserController,ProgramStudiController,JenisKelaminController\r\n```\r\nNama File\t: \r\n```\r\nUserController.php, ProgramStudiController.php, JenisKelaminController.php\r\n```\r\nPenulisan URL\t: \r\n```\r\n/user, /program-studi, /jenis-kelamin\r\n```\r\n\r\nuntuk penulisan method pada controller sebagai berikut\r\n\r\nMethod :\r\n```\r\ngetUserByName()\r\nlistArtikel()\r\nkomentar()\r\n```\r\nURL :\r\n```\r\nget-user-by-name\r\nlist-artikel\r\nkomentar\r\n```\r\n\r\nParameter pada URL tidak ada perubahan, stylenya seperti biasa.\r\n\r\n\r\n#### Layout\r\n\r\nNipIgniter menggunakan templating sederhana. Menggunakan 2 buah view. View pertama dinamakan 'layout', kemudian view yang kedua dinamakan 'partial'. Ada 2 buah method yang menggantikan cara lama dalam menampilkan view.\r\n```\r\n$this->load->view('nama_view', $data);\r\n```\r\ndiganti :\r\n```\r\n$this->render('nama_view', $data);\r\n```\r\natau\r\n```\r\n$this->renderPartial('nama_view', $data);\r\n```\r\n\r\nMethod render() membutuhkan file yang akan menjadi induk dari file partial yang akan ditampilkan.\r\nLayout yang menjadi induk path-nya secara default mengacu pada file application/views/layout/main.php.\r\nDefinisi path layout dapat diubah berdasar variable $this->pageLayout = \"layout/main\".\r\n\r\nMethod renderPartial() langsung menampilkan view yang dituju. \r\nMethod ini fungsinya sama dengan $this->load->view().\r\n\r\nMudahnya gini sebagai contoh, view dengan nama 'edit_user' di masukkan ke dalam view dengan nama 'main' (sebagai layout). Bagi teman-teman yang pernah menggunakan framework lain seperti yii atau laravel, mungkin sudah familiar, karna memang konsepnya meniru mereka.\r\n\r\n#### View\r\n\r\nDi controller juga terdapat variable $this->view; yang isinya adalah string 'controller/method' sesuai dengan URL. Disini saya menghimbau agar penamaan view sesuai dengan controller dan method yang di akses.\r\n\r\nContohnya :\r\n```\r\nUserController dengan method index()\r\nAdminUtamaController dengan method kelolaUser()\r\n```\r\nview-nya adalah\r\n```\r\nuser/index.php\r\nadmin-utama/kelola-user.php\r\n```\r\n\r\nJika mengikuti style ini maka dengan mudah dapat dilakukan perenderan view dengan cara \r\n```\r\n$this->render($this->view);\r\n```\r\n\r\n### 2). Model\r\n\r\nPenggunaan model di NipIgniter mengadopsi style-style dari framework lain seperti yii, cake, atau laravel. Jika teman-teman pernah memakai framework-framework tersebut mungkin teman-teman sudah lebih gampang untuk memakainya. Tapi walaupun ada teman-teman yang belum familiar, pelajari saja dokumentasi dibawah ini. Gampang koq. :D\r\n\r\nModelnya mengextends kelas Nip_Model.\r\n\r\n#### Pendefinisian Nip_Model\r\n\r\n```\r\nclass User extends Nip_Model {}\r\n```\r\nNip_Model mempunyai variable yang mendefinisikan pada table mana model ini mengacu. Dan Nip_Model perlu mengetahui field mana yang menjadi primary key. Diusahakan primary key-nya pakai kata 'id' saja. Lebih simple.\r\n\r\n```\r\nclass User extends Nip_Model {\r\n\tprotected $tableName = \"user\";\r\n\tprotected $primary = \"id\";\r\n}\r\n```\r\n\r\nAtribut User model adalah nama-nama field asli yang ada di database. Perlu diperhatikan bahwa HANYA field database menggunakan sifat 'public'. Selain itu harus protected atau private. Nip_Model mengenali atribut yang bersifat public sebagai field dari database, jadi pada saat insert atau update atribut public itu lah yang akan di masukkan kedalam database. Jika ada atribut public tapi bukan merupakan field database, maka akan terjadi error pada saat insert atau update. \r\nDiusahakan nama field nya huruf kecil semua dan jika kata nya lebih dari 1 kata maka dipisahkan dengan spasi.\r\n\r\n```\r\nclass User extends Nip_Model {\r\n\tprotected $tableName = \"user\";\r\n\tprotected $primary = \"id\";\r\n\r\n\tpublic $id;\r\n\tpublic $fullname;\r\n\tpublic $username;\r\n\tpublic $password;\r\n\tpublic $email;\r\n\tpublic $created;\r\n\tpublic $updated;\r\n\tpublic $deleted;\r\n\r\n\tprotected $softDeletes = TRUE;\r\n}\r\n```\r\n\r\nAturan tambahan di Nip_Model ada 3 field dasar yang harus ada di tiap table database. Yaitu ``` created, updated, dan deleted ```\r\nTerlihat di atas bahwa ada atribut yang bernama $softDeletes, konsep ini meniru dari framework laravel, yang fungsi intinya adalah data yang di delete tidak akan benar-benar dihapus jika tidak dilakukan aksi forceDelete(). Jadi data yang di delete bisa dinamakan sebagai sampah.\r\n\r\n#### Validasi\r\n\r\nValidasi di Codeigniter bisa dikatakan lumayann ribet. Tapi di NipIgniter, validasi dilakukan di model. Teman-teman cukup menambahkan atribut array seperti di bawah ini. (Bisa digenerate)\r\n\r\n```\r\n\tprotected $validator = array(\r\n\t\t\t'User[fullname]' => 'required|max_length[100]',\r\n\t\t\t'User[username]' => 'required|max_length[20]',\r\n\t\t\t'User[password]' => 'required|max_length[100]',\r\n\t\t\t'User[email]' => 'required|max_length[50]|valid_email',\r\n\t\t);\r\n\t\r\n\tprotected $label = array(\r\n\t\t\t'User[fullname]' => 'Fullname',\r\n\t\t\t'User[username]' => 'Username',\r\n\t\t\t'User[password]' => 'Password',\r\n\t\t\t'User[email]' => 'Email',\r\n\t\t);\r\n```\r\n\r\nTidak perlu bingung, fitur ini hanya mempersingkat kita untuk melakukan validasi.\r\nValidasi bisa di lakukan dengan menggunakan method $user->validate(). \r\n(Contohnya bisa dilihat pada file yang di generate dengan CRUD Generator).\r\n\r\n\r\n#### Operasi standar\r\n\r\n##### Menyeleksi semua row di suatu model\r\n\r\nParameter lengkap bisa dilihat pada application/core/Nip_Model.php\r\n\r\n```\r\n$array = $this->User->all();\r\n\r\n//menggunakan parameter where\r\n$array = $this->User->all(array('email'=>'honeyf.amew@gmail.com'));\r\n```\r\n\r\n##### Menyeleksi row pertama pada suatu model\r\n```\r\n$object = $this->User->first();\r\n\r\n//berdasarkan primary key\r\n$object = $this->User->first(1);\r\n```\r\n\r\n##### Menghitung jumlah baris\r\n```\r\n$count = $this->User->count();\r\n\r\n//berdasarkan parameter $where\r\n$count = $this->User->count(array('jenis_kelamin'=>'laki-laki'));\r\n```\r\n\r\n##### Menyimpan row baru (insert)\r\n```\r\n$object = new User();\r\n$object->fullname = \"Hanif Nur Amrullah\";\r\n$object->username = \"amrew\";\r\n$object->password = md5(\"rahasia\");\r\n$object->email = \"honeyf.amrew@gmail.com\";\r\n$object->save();\r\n```\r\n\r\n##### Mengubah row (update)\r\n```\r\n$id = 1;\r\n$object = $this->User->first($id);\r\n$object->password = md5(\"password-diganti\");\r\n$object->save();\r\n```\r\n\r\n##### Menghapus row (delete)\r\n```\r\n$object = $this->User->first($id);\r\n$model->delete();\r\n\r\natau \r\n\r\n$this->User->delete($id);\r\n$this->User->delete(array('jenis_kelamin'=>'laki-laki'));\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}